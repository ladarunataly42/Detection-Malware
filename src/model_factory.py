from src.models.ada_boost import AdaBoost
from src.models.decision_tree import DecisionTree
from src.models.gaussian_process import GaussianProcess
from src.models.kneighbors import KNeighbors
from src.models.naive_bayes import NaiveBayes
from src.models.neural_network import NeuralNetwork
from src.models.random_forest import RandomForest
from src.models.svm import Svm


class ModelFactory:
    _models = {'svm': Svm(model_name='SVM'),
               'svm_auto': Svm(model_name='SVM Gamma:auto', gamma='auto'),
               'svm_kernel_poly': Svm(model_name='SVM Kernel:poly', kernel='poly'),
               'svm_kernel_poly_gamma': Svm(model_name='SVM Kernel:poly Gamma:auto', kernel='poly', gamma='auto'),
               'svm_kernel_sigmoid': Svm(model_name='SVM Kernel:sigmoid', kernel='sigmoid'),
               'svm_kernel_sigmoid_gamma': Svm(model_name='SVM Kernel:sigmoid Gamma:auto', kernel='sigmoid',gamma='auto'),
               'svm_kernel_linear': Svm(model_name='SVM Kernel:linear', kernel='linear'),
               'kneighbors': KNeighbors(model_name='KNeighbors'),
               'kneighbors_25': KNeighbors(model_name='KNeighbors 25', n_neighbors=25),
               'kneighbors_100': KNeighbors(model_name='KNeighbors 100', n_neighbors=100),
               'gaussian_process': GaussianProcess(model_name='Gaussian Process'),
               'decision_tree': DecisionTree(model_name='Decision Tree'),
               'decision_tree_entropy': DecisionTree(model_name='Decision Tree   Criterion:entropy',  criterion='entropy'),
               'decision_tree_log_loss': DecisionTree(model_name='Decision Tree   Criterion:log_loss',  criterion='log_loss'),
               'decision_tree_max_depth1': DecisionTree(model_name='Decision Tree   Max_Depth: 1', max_depth=1),
               'decision_tree_max_depth20': DecisionTree(model_name='Decision Tree   Max_Depth: 20', max_depth=20),
               'decision_tree_min_samples_split4': DecisionTree(model_name='Decision Tree   Min_Samples_Split: 4', min_samples_split=4),
               'decision_tree_min_samples_split0': DecisionTree(model_name='Decision Tree   Min_Samples_Split: 0.2', min_samples_split=0.2),
               'decision_tree_min_samplesLeaf02': DecisionTree(model_name='Decision Tree   Min_Samples_Leaf: 0.2', min_samples_leaf=0.2),
               'decision_tree_min_samplesLeaf08': DecisionTree(model_name='Decision Tree   Min_Samples_Leaf: 0.8', min_samples_leaf=0.8),
               'random_forest': RandomForest(model_name='RandomForest'),
               'random_forest_1': RandomForest(model_name='RandomForest N_estimators:1', n_estimators=1),
               'random_forest_entropy': RandomForest(model_name='RandomForest  Criterion:entropy', criterion ='entropy'),
               'random_forest_log_loss': RandomForest(model_name='RandomForest  Criterion:log_loss', criterion ='log_loss'),
               'random_forest_max_depth10': RandomForest(model_name='RandomForest  Max Depth:10', max_depth=10),
               'random_forest_max_depth50': RandomForest(model_name='RandomForest  Max Depth:50',max_depth=55),
               'random_forest_bootsrap': RandomForest(model_name='RandomForest  Bootstrap:False',bootstrap=False),
               'neural_network': NeuralNetwork(model_name='Neural Network'),
               'neural_network_identity': NeuralNetwork(model_name='Neural Network  Activation:Identity', activation='identity'),
               'neural_network_logistic': NeuralNetwork(model_name='Neural Network  Activation:Logistic', activation='logistic'),
               'neural_network_tanh': NeuralNetwork(model_name='Neural Network  Activation:tanh', activation='tanh'),
               'neural_network_invscaling': NeuralNetwork(model_name='Neural Network  Learning_rate:invscaling', learning_rate='invscaling'),
               'neural_network_adaptive': NeuralNetwork(model_name='Neural Network  Learning_rate:adaptive', learning_rate='adaptive'),
               'ada_boost': AdaBoost(model_name='Ada Boost'),
               'ada_boost_20_estimators': AdaBoost(model_name='Ada Boost   N_estimators:20', n_estimators=20),
               'naive_bayes': NaiveBayes(model_name='Naive Bayes'),


               }

    @staticmethod
    def get(model_name):
        return ModelFactory._models.get(model_name)
